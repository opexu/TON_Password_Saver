#include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions
#include "imports/strings.fc"; ;; 

int tuple_length (tuple t) asm "TLEN";
global tuple temp_tuple;
const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

int are_slices_equal(slice a, slice b) {
    return a.slice_hash() == b.slice_hash();
}

(cell, slice, slice) load_salt_pass( slice s, int i ){
    cell c = s~load_ref();
    ~strdump("====== i ========");~dump(i);
    int salt_bits = s~load_uint(8);
    int pass_bits = s~load_uint(8);
    slice pass = slice_last(s, pass_bits);
    s~skip_last_bits(pass_bits);
    slice salt = slice_last(s, salt_bits);
    return (c, salt, pass);
}

(slice) check_cell( slice in_s ) impure {
    ~strdump("====== check_cell ========");
    int iterator = 0;
    int result = 1;
    slice result_slice = "empty";
    cell c = get_data();
    slice s = c.begin_parse();
    while( (slice_refs(s) > 0) & (result > 0) ){
        (cell cc, slice salt, slice pass) = load_salt_pass( s, iterator );
        if( are_slices_equal(in_s, salt) ){
            ~strdump("====== check_cell IF ========");
            result_slice = pass;
            result = 0;
        }
        s = cc.begin_parse();
        iterator = iterator + 1;
    }
    return result_slice;
}

(tuple, tuple) repeat_tuple(){
    tuple t1 = empty_tuple();
    t1~tpush("One");
    t1~tpush("Two");
    t1~tpush("Three");
    t1~tpush("Four");
    t1~tpush("Five");
    t1~tpush("Six");
    t1~tpush("Seven");
    t1~tpush("Eight");
    t1~tpush("Nine");
    t1~tpush("Ten");

    tuple t2 = empty_tuple();
    t2~tpush("_One_");
    t2~tpush("_Two_");
    t2~tpush("_Three_");
    t2~tpush("_Four_");
    t2~tpush("_Five_");
    t2~tpush("_Six_");
    t2~tpush("_Seven_");
    t2~tpush("_Eight_");
    t2~tpush("_Nine_");
    t2~tpush("_Ten_");
    return (t1, t2);
}

(cell) write_cell_w_ref( tuple t1, tuple t2, int i, cell c ){
    return begin_cell()
        .store_ref(c)
        .store_uint( slice_bits(t1.at(i)), 8)
        .store_uint( slice_bits(t2.at(i)), 8)
        .store_slice( t1.at(i) )
        .store_slice( t2.at(i) )
        .end_cell();
}

(cell) write_cell_wo_ref( tuple t1, tuple t2, int i ){
    return begin_cell()
        .store_uint( slice_bits(t1.at(i)), 8)
        .store_uint( slice_bits(t2.at(i)), 8)
        .store_slice( t1.at(i) )
        .store_slice( t2.at(i) )
        .end_cell();
}

() save_data(tuple t) impure {

    ;;(tuple t1, tuple t2) = repeat_tuple();
    int tlength = t.tuple_length();
    
    int iterator = 0;

    cell c = write_cell_wo_ref( t1, t2, iterator );
    cell c0 = begin_cell().end_cell();

    while( iterator < tlength - 1 ){
        iterator = iterator + 1;
        ~strdump("====== while iterator ========"); ~dump(iterator);
        ~strdump("====== while salt ========"); ~strdump(t1.at(iterator));
        
        cell ci = write_cell_w_ref( t1, t2, iterator, c );

        c = ci;
    }

    ~strdump("====== before set_data ========");
    set_data(c);
}

;; recv_internal is the main function of the contract and is called when it receives a message
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }
    ;; ~strdump("in_msg_body");
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    ;; load_data(); ;; here we populate the storage variables
    ;; in this case, it could also be done in the single op::increase handler, but generally you would want
    ;; to populate storage variables as soon as all preliminary checks which do not need storage pass

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    ;; int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it

    if (op == op::increase) { ;; handle op::increase
        ;; ;;int salt = slice_bits(in_msg_body); ;; read by how much we want to increase the counter
        ;; slice salt = in_msg_body~load_ref();
        ;; ~strdump("====== receive salt ========");
        ;; ~dump(salt);
        ;; slice pass = in_msg_body~load_ref();
        ;; ~strdump("====== receive pass ========");
        ;; ~dump(pass);
        ctx_salt_bits_length = in_msg_body~load_uint(8);
        ~strdump("====== receive ctx_salt_bits_length ========");
        ~dump(ctx_salt_bits_length);
        ctx_pass_bits_length = in_msg_body~load_uint(8);
        ~strdump("====== receive ctx_pass_bits_length ========");
        ~dump(ctx_pass_bits_length);
        ctx_salt = in_msg_body~load_uint(ctx_salt_bits_length);
        ~strdump("====== receive ctx_salt ========");
        ~dump(ctx_salt);
        temp_tuple~tpush(ctx_salt);
        ctx_pass = in_msg_body~load_uint(ctx_pass_bits_length);
        ~strdump("====== receive ctx_pass ========");
        ~dump(ctx_pass);
        temp_tuple~tpush(ctx_pass);
        save_data(temp_tuple); ;; when we change storage variables, we need to store the changed variables, so we call save_data()
        return (); ;; this message is handled so we return
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts
(cell) get_salt() method_id {

    slice s = check_cell("Two");
    ~strdump("====== get_salt check_cell ========"); ~strdump(s);
    cell c = begin_cell()
        .store_slice(s)
        .end_cell();
    return c; ;; then return the value
}

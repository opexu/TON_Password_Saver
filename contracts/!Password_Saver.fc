#include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions
#include "imports/strings.fc"; ;; 

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables
;; global int ctx_id; ;; id is required to be able to create different instances of counters, because addresses in TON depend on the initial state of the contract
;; global int ctx_salt;
;; global int ctx_salt_bits_length;
;; global int ctx_pass;
;; global int ctx_pass_bits_length;

(int, int, int) load_data() impure {
    slice c2s = get_data().begin_parse();
    int c2i = c2s~load_uint(8);
    ~strdump("====== load c2i ========"); ~dump(c2i);
    slice c1s = c2s~load_ref().begin_parse();
    int c1i = c1s~load_uint(8);
    ~strdump("====== load c1i ========"); ~dump(c1i);
    slice c0s = c1s~load_ref().begin_parse();
    int c0i = c0s~load_uint(8);
    ~strdump("====== load c0i ========"); ~dump(c0i);

    return ( c0i, c1i, c2i );
}

(cell) load_data_2() impure {
    ~strdump("====== load_data_2 ========");
    slice s = get_data().begin_parse();
    cell c = s~load_dict();
    ;; if(c.dict_empty?()){
    ;;     ~strdump("====== dict_empty? ========");
    ;; }
    int iterator = 0;
    repeat( 10 ){
        (slice ss, int i) = c.udict_get?(8, iterator);
        ~strdump("====== repeat iterator ========"); ~dump(iterator);
        int ui = ss~load_uint(8);
        ~strdump("====== repeat ui ========"); ~dump(ui);
        iterator = iterator + 1;
    }
    return c;
}

() save_data() impure {
    
    cell c0 = begin_cell()
        .store_uint(100, 8)
        .end_cell();
    
    cell c1 = begin_cell()
        .store_uint(1, 8)
        .store_ref( c0 )
        .end_cell();

    cell c2 = begin_cell()
        .store_uint(2, 8)
        .store_ref( c1 )
        .end_cell();
    
    cell dict = new_dict();
    builder first_cell_builder = begin_cell();
    int iterator = 0;
    repeat( 10 ){
        cell c = begin_cell()
            .store_uint(iterator, 8)
            .end_cell();

        dict~udict_set( 8, iterator, c.begin_parse());
        
        iterator = iterator + 1;
    }
    builder b = first_cell_builder.store_dict(dict);
    cell bc = b.end_cell();
    set_data( bc );
}

;; cell msg = begin_cell()
;;     .store_uint(0x18, 6)
;;     .store_slice(addr)
;;     .store_coins(amount)
;;     .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
;;     .store_slice(message_body)
;;     .end_cell();

;; recv_internal is the main function of the contract and is called when it receives a message
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }
    ;; ~strdump("in_msg_body");
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    ;; load_data(); ;; here we populate the storage variables
    ;; in this case, it could also be done in the single op::increase handler, but generally you would want
    ;; to populate storage variables as soon as all preliminary checks which do not need storage pass

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    ;; int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it

    if (op == op::increase) { ;; handle op::increase
        ;; ;;int salt = slice_bits(in_msg_body); ;; read by how much we want to increase the counter
        ;; slice salt = in_msg_body~load_ref();
        ;; ~strdump("====== receive salt ========");
        ;; ~dump(salt);
        ;; slice pass = in_msg_body~load_ref();
        ;; ~strdump("====== receive pass ========");
        ;; ~dump(pass);

        save_data(); ;; when we change storage variables, we need to store the changed variables, so we call save_data()
        return (); ;; this message is handled so we return
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts
(cell) get_salt() method_id {
    ;; (int d1, int d2, int d3) = load_data(); ;; when a get method is called, storage variables are not populated, so we populate them first
    ;; cell c = begin_cell()
    ;;     .store_uint(d1, 8)
    ;;     .store_uint(d2, 8)
    ;;     .store_uint(d3, 8)
    ;;     .end_cell();

    cell c = load_data_2();
    return c; ;; then return the value
}

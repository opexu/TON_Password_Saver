#include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions
#include "imports/strings.fc"; ;; 

int tuple_length (tuple t) asm "TLEN";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

int are_slices_equal(slice a, slice b) {
    return a.slice_hash() == b.slice_hash();
}

(cell, slice, slice) load_salt_pass( slice s ){
    cell c = s~load_ref();
    int salt_bits = s~load_uint(8);
    int pass_bits = s~load_uint(8);
    slice pass = slice_last(s, pass_bits);
    s~skip_last_bits(pass_bits);
    slice salt = slice_last(s, salt_bits);
    return (c, salt, pass);
}

(slice) check_cell( slice in_s ) {
    ~strdump("====== check_cell ========");
    int iterator = 0;
    int result = 1;
    slice result_slice = "empty";
    cell c = get_data();
    slice s = c.begin_parse();
    while( (slice_refs(s) > 0) & (result > 0) ){
        (cell cc, slice salt, slice pass) = load_salt_pass( s );
        if( are_slices_equal(in_s, salt) ){
            ~strdump("====== check_cell IF ========");
            result_slice = pass;
            result = 0;
        }
        s = cc.begin_parse();
        iterator = iterator + 1;
    }
    return result_slice;
}

(cell) write_cell( slice salt, slice pass, cell ref_cell ) {
    return begin_cell()
        .store_ref(ref_cell)
        .store_uint( slice_bits( salt ), 8)
        .store_uint( slice_bits( pass ), 8)
        .store_slice( salt )
        .store_slice( pass )
        .end_cell();
}

() save_data( slice in_salt, slice in_pass ) impure {

    cell c = get_data();
    slice s = c.begin_parse();

    ;; выполняется только в самый первый раз
    if( slice_data_empty?(s) ){
        cell cc = write_cell( in_salt, in_pass, begin_cell().end_cell() );
        set_data(cc);
        return();
    }

    cell cc = write_cell( in_salt, in_pass, c );
    set_data(cc);
}

;; recv_internal is the main function of the contract and is called when it receives a message
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if( in_msg_body.slice_empty?() ){
        return ();
    }

    ;; ~strdump("in_msg_body");
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention

    if (op == op::increase) { ;; handle op::increase

        int in_salt_bits = in_msg_body~load_uint(8);
        int in_pass_bits = in_msg_body~load_uint(8);
        slice pass = slice_last(in_msg_body, in_pass_bits);
        if( pass.slice_empty?() ) {
            return ();
        }

        in_msg_body~skip_last_bits(in_pass_bits);
        slice salt = slice_last(in_msg_body, in_salt_bits);
        if( salt.slice_empty?() ) {
            return ();
        }

        save_data( salt, pass );
        return (); ;; this message is handled so we return
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}

(cell) error_cell( slice error_msg ) {
    return begin_cell()
        .store_uint( slice_bits(error_msg), 8)
        .store_slice(error_msg)
        .end_cell();
}
;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts
(cell) get_salt( slice payload ) method_id {
    if( payload.slice_empty?() ){
        return( error_cell("payload empty") );
    }
    
    slice s = check_cell( payload );
    ~strdump("====== get_salt check_cell ========"); ~strdump(s);
    cell c = begin_cell()
        .store_uint( slice_bits(s), 8)
        .store_slice(s)
        .end_cell();
    return c; ;; then return the value
}

#include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions
#include "imports/strings.fc"; ;; 

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables
global int ctx_id; ;; id is required to be able to create different instances of counters, because addresses in TON depend on the initial state of the contract
global slice ctx_salt;
global int ctx_salt_bits_length;
global slice ctx_pass;
global int ctx_pass_bits_length;

;; load_data populates storage variables using stored data (get_data())
() load_data() impure { ;; the impure modifier is needed because the compiler optimizes away any non-impure function the return value of which is not used
    slice ds = get_data().begin_parse(); ;; begin_parse() converts cell to slice to read data from it

    ctx_id = ds~load_uint(32); ;; load id as 32 bit unsigned integer

    ctx_salt_bits_length = ds~load_uint(8);
    ~strdump("====== load ctx_salt_bits_length ========");
    ~dump(ctx_salt_bits_length);
    ctx_pass_bits_length = ds~load_uint(8);
    ~strdump("====== load ctx_pass_bits_length ========");
    ~dump(ctx_pass_bits_length);
    ctx_pass = slice_last(ds, ctx_pass_bits_length);
    ds~skip_last_bits(ctx_pass_bits_length);
    ~strdump("====== load ctx_pass ========");
    ~strdump(ds);
    ~strdump(ctx_pass);
    ~dump(ctx_pass);
    ctx_salt = slice_last(ds, ctx_salt_bits_length);
    ds~skip_last_bits(ctx_salt_bits_length);
    ~strdump("====== load ctx_salt ========");
    ~strdump(ds);
    ~strdump(ctx_salt);
    ~dump(ctx_salt);

    ds.end_parse(); ;; end_parse() checks that the remaining slice is empty (if it isn't, it can indicate a mistake during serialization of data)
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data( ;; set_data() stores a cell into persistent storage
        begin_cell() ;; begin_cell() returns a builder - a type to create cells
            .store_uint(ctx_id, 32) ;; this layout needs to be the same as the one used in load_data()
            .store_slice(ctx_salt)
            .store_slice(ctx_pass)
        ;; .store_uint(ctx_salt_bits_length, 8)
        ;; .store_uint(ctx_pass_bits_length, 8)
        ;; .store_uint(ctx_salt, ctx_salt_bits_length)
        ;; .store_uint(ctx_pass, ctx_pass_bits_length)
            .end_cell() ;; end_cell() converts a builder into a cell
    );
}

;; cell msg = begin_cell()
;;     .store_uint(0x18, 6)
;;     .store_slice(addr)
;;     .store_coins(amount)
;;     .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
;;     .store_slice(message_body)
;;     .end_cell();

;; recv_internal is the main function of the contract and is called when it receives a message
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ~strdump("====== on recv_internal ========");
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        ~strdump("====== in_msg_body.slice_empty? ========");
        return ();
    }
    ;; ~strdump("in_msg_body");
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        ~strdump("====== flags & 1 ========");
        return ();
    }

    ~strdump("====== receive before load data ========");
    load_data(); ;; here we populate the storage variables
    ;; in this case, it could also be done in the single op::increase handler, but generally you would want
    ;; to populate storage variables as soon as all preliminary checks which do not need storage pass
    ~strdump("====== receive after load data ========");
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    ;; int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it

    if (op == op::increase) { ;; handle op::increase
        ;;int salt = slice_bits(in_msg_body); ;; read by how much we want to increase the counter
        ~strdump("====== receive op == op::increase parse in_msg_body ========");
        
        ctx_salt_bits_length = in_msg_body~load_uint(8);
        ~strdump("====== receive ctx_salt_bits_length ========");
        ~dump(ctx_salt_bits_length);
        ctx_pass_bits_length = in_msg_body~load_uint(8);
        ~strdump("====== receive ctx_pass_bits_length ========");
        ~dump(ctx_pass_bits_length);
        ctx_pass = slice_last(in_msg_body, ctx_pass_bits_length);
        in_msg_body~skip_last_bits(ctx_pass_bits_length);
        ~strdump("====== receive ctx_pass ========");
        ~strdump(ctx_pass);
        ~dump(ctx_pass);
        ctx_salt = slice_last(in_msg_body, ctx_salt_bits_length);
        in_msg_body~skip_last_bits(ctx_salt_bits_length);
        ~strdump("====== receive ctx_salt ========");
        ~strdump(ctx_salt);
        ~dump(ctx_salt);
        save_data(); ;; when we change storage variables, we need to store the changed variables, so we call save_data()
        return (); ;; this message is handled so we return
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts
(cell) get_salt() method_id {
    
    load_data(); ;; when a get method is called, storage variables are not populated, so we populate them first
    
    ;; cell c = begin_cell()
    ;;     .store_slice(ctx_salt)
    ;;     .store_slice(ctx_pass)
    ;;     .end_cell();

    cell c = get_data();
    
    return c; ;; then return the value
}

;; same deal as the previous get method, but this one returns the id of the counter
(int) get_id() method_id {
    load_data();
    return ctx_id;
}
